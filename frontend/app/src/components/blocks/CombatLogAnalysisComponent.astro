---
import { i18n } from '@helpers/i18n'
const { lang, t } = i18n(Astro.url)

import type { CombatLogAnalysis } from '@dtypes/layout_components'

interface Props {
    combat_log_analysis:    CombatLogAnalysis;
}

const {
    combat_log_analysis
} = Astro.props

const timeline = combat_log_analysis?.timeline
const damage_in = combat_log_analysis?.damage_in
const damage_out = combat_log_analysis?.damage_out

import { format_date_time } from '@helpers/date'
import { get_item_icon } from '@helpers/eve_image_server'

import Flexblock from '@components/compositions/Flexblock.astro'
import Grid from '@components/compositions/Grid.astro'
import FlexInline from '@components/compositions/FlexInline.astro'

import TextGroup from '@components/blocks/TextGroup.astro'
import ComponentBlock from '@components/blocks/ComponentBlock.astro'
import Badge from '@components/blocks/Badge.astro'
import Square from '@components/blocks/Square.astro'
---

<Flexblock gap='var(--space-xl)'>
    <Grid
        class="[ component w-full grid-fill ]"
        row_gap="var(--space-3xs)"
        column_gap="var(--space-3xs)"
        min_item_width="300px"
    >
        <TextGroup title={t('log_start')}>{format_date_time(lang, combat_log_analysis?.start)}</TextGroup>
        <TextGroup title={t('log_end')}>{format_date_time(lang, combat_log_analysis?.end)}</TextGroup>
        <TextGroup title={t('logged_events')}>{combat_log_analysis?.logged_events}</TextGroup>
    </Grid>

    <Flexblock>
        {(combat_log_analysis?.weapons?.length ?? 0) > 0 &&
            <ComponentBlock>
                <Flexblock gap='var(--space-l)'>
                    <h3>{t('weapons')}</h3>
                    <Grid
                        class="[ component w-full grid-fill ]"
                        row_gap="var(--space-3xs)"
                        column_gap="var(--space-3xs)"
                        min_item_width="300px"
                    >
                        {combat_log_analysis?.weapons.map(weapon_damage =>
                            <Badge
                                title={weapon_damage.name}
                                image={get_item_icon(weapon_damage.item_type)}
                            >
                                <Flexblock gap='var(--space-3xs)'>
                                    <FlexInline class="[ !items-baseline ]" gap='var(--space-3xs)'>
                                        <Square
                                            color='green'
                                            x-init="tippy($el, tippy_options)"
                                            data-tippy-content={t('damage_to_enemy')}
                                        />
                                        <small>{weapon_damage.total_to} ({weapon_damage.dps_to} dps) - {weapon_damage.volleys_to} {t('volleys')}</small>
                                    </FlexInline>
                                    <FlexInline class="[ !items-baseline ]" gap='var(--space-3xs)'>
                                        <Square
                                            color='fleet-red'
                                            x-init="tippy($el, tippy_options)"
                                            data-tippy-content={t('damage_from_enemy')}
                                        />
                                        <small>{weapon_damage.total_from} ({weapon_damage.dps_from} dps) - {weapon_damage.volleys_from} {t('volleys')}</small>
                                    </FlexInline>
                                </Flexblock>
                            </Badge>
                        )}
                    </Grid>
                </Flexblock>
            </ComponentBlock>
        }

        {(combat_log_analysis?.enemies?.length ?? 0) > 0 &&
            <ComponentBlock>
                <Flexblock gap='var(--space-l)'>
                    <h3>{t('enemies')}</h3>
                    <Grid
                        class="[ component w-full grid-fill ]"
                        row_gap="var(--space-3xs)"
                        column_gap="var(--space-3xs)"
                        min_item_width="300px"
                    >
                        {combat_log_analysis?.enemies.map(enemy_damage =>
                            <Badge
                                title={enemy_damage.name}
                                image={get_item_icon(enemy_damage.item_type)}
                            >
                                <Flexblock gap='var(--space-3xs)'>
                                    <FlexInline class="[ !items-baseline ]" gap='var(--space-3xs)'>
                                        <Square
                                            color='green'
                                            x-init="tippy($el, tippy_options)"
                                            data-tippy-content={t('damage_to_enemy')}
                                        />
                                        <small>{enemy_damage.total_to} ({enemy_damage.dps_to} dps) - {enemy_damage.volleys_to} {t('volleys')}</small>
                                    </FlexInline>
                                    <FlexInline class="[ !items-baseline ]" gap='var(--space-3xs)'>
                                        <Square
                                            color='fleet-red'
                                            x-init="tippy($el, tippy_options)"
                                            data-tippy-content={t('damage_from_enemy')}
                                        />
                                        <small>{enemy_damage.total_from} ({enemy_damage.dps_from} dps) - {enemy_damage.volleys_from} {t('volleys')}</small>
                                    </FlexInline>
                                </Flexblock>
                            </Badge>
                        )}
                    </Grid>
                </Flexblock>
            </ComponentBlock>
        }

        <ComponentBlock class="[ max-h-[80vh] h-dvh ]">
            <canvas id="damage-log-chart"></canvas>
            <canvas id="damage-log-chart-lines"></canvas>

            <input type="hidden" id="chart-data" value={JSON.stringify({timeline: timeline, damage_in:damage_in, damage_out:damage_out})} />
        </ComponentBlock>
    </Flexblock>
</Flexblock>


<script define:vars={{timeline: timeline, damage_in:damage_in, damage_out:damage_out}}>
    /*import Chart from "chart.js/auto";
    alert('asd')*/

    // const { timeline, damage_in, damage_out } = JSON.parse((document.getElementById("chart-data") as HTMLInputElement).value)

    console.log(timeline)
    console.log(damage_in)
    console.log(damage_out)

    const damage_in_scatter = []
    const damage_out_scatter = []

    for (let i in timeline) {
        const index = parseInt(i)

        if (damage_in[i] > 0) {
            damage_in_scatter.push({
                x: index,
                y: damage_in[i],
            })
        }

        if (damage_out[i] > 0) {
            damage_out_scatter.push({
                x: index,
                y: damage_out[i],
            })
        }
    }

    const ctx = document.getElementById("damage-log-chart").getContext("2d")

    Chart.defaults.borderColor = 'rgb(255, 255, 255, 0.05)'
    Chart.defaults.color = '#ffffff';
    Chart.defaults.font.family = 'Montserrat Variable';

    new Chart(ctx, {
        type: "scatter",
        data: {
            datasets: [
                {
                    label: "Damage taken",
                    data: damage_in_scatter,
                    pointStyle: 'rect',
                    pointRadius: 2,
                    backgroundColor: '#b53620',
                    borderColor: '#b53620',
                },
                {
                    label: "Damage done",
                    data: damage_out_scatter,
                    pointStyle: 'rect',
                    pointRadius: 2,
                    backgroundColor: '#198754',
                    borderColor: '#198754',
                }
            ]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    title: {
                        display: true,
                        text: "Tick (events in 10 seconds spam)"
                    },
                    grid: {
                        display: false
                    },
                    ticks: {
                        display: false
                    },
                    max: (timeline?.length ?? 9) + 1,
                },
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: "Damage"
                    },
                    grid: {
                        display: false
                    },
                }
            },
            plugins: {
                legend: {
                    position: "top"
                },
                title: {
                    display: false,
                }
            }
        }
    })
</script>